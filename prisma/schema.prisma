// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Store {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")

  @@index([userId])
}

model Billboard {
  id        String   @id @default(uuid())
  label     String
  imageUrl  String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String   @id @default(cuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store         Store      @relation("StoreToCategory", fields: [storeId], references: [id])
  products      Product[]  @relation("CategoryToProduct")
  billboard     Billboard  @relation(fields: [billboardId], references: [id])
  subcategories Subcategory[] @relation("CategoryToSubcategory")

  @@index([storeId])
  @@index([billboardId])
}

model Subcategory {
  id          String   @id @default(cuid())
  categoryId  String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation("CategoryToSubcategory", fields: [categoryId], references: [id])
  products Product[] @relation("SubcategoryToProduct")

  @@index([categoryId])
}

model Size {
  id        String   @id @default(uuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String

  store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String

  store    Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  storeId    String
  sizeId     String
  categoryId String
  colorId    String
  subcategoryId String

  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subcategory   Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([subcategoryId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id        String   @id @default(uuid())
  phone     String   @default("")
  isPaid    Boolean  @default(false)
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String

  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id String @id @default(cuid())

  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
